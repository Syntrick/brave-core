diff --git a/third_party/blink/renderer/modules/credentialmanager/credentials_container.cc b/third_party/blink/renderer/modules/credentialmanager/credentials_container.cc
index 004fca6cd7d6a1fbba472d7ead99f18659d5e402..3d225496d5f00d049808aab8d754d46569f84ff0 100644
--- a/third_party/blink/renderer/modules/credentialmanager/credentials_container.cc
+++ b/third_party/blink/renderer/modules/credentialmanager/credentials_container.cc
@@ -214,6 +214,7 @@ bool CheckPublicKeySecurityRequirements(ScriptPromiseResolver* resolver,
   return true;
 }
 
+#if defined(MUON_CHROMIUM_BUILD)
 // Checks if the icon URL of |credential| is an a-priori authenticated URL.
 // https://w3c.github.io/webappsec-credential-management/#dom-credentialuserdata-iconurl
 bool IsIconURLEmptyOrSecure(const Credential* credential) {
@@ -235,6 +236,7 @@ bool IsIconURLEmptyOrSecure(const Credential* credential) {
          url.ProtocolIsData() ||
          SecurityOrigin::Create(url)->IsPotentiallyTrustworthy();
 }
+#endif
 
 DOMException* CredentialManagerErrorToDOMException(
     CredentialManagerError reason) {
@@ -303,12 +305,14 @@ DOMException* CredentialManagerErrorToDOMException(
   return nullptr;
 }
 
+#if defined(MUON_CHROMIUM_BUILD)
 void OnStoreComplete(std::unique_ptr<ScopedPromiseResolver> scoped_resolver,
                      RequiredOriginType required_origin_type) {
   auto* resolver = scoped_resolver->Release();
   AssertSecurityRequirementsBeforeResponse(resolver, required_origin_type);
   resolver->Resolve();
 }
+#endif
 
 void OnPreventSilentAccessComplete(
     std::unique_ptr<ScopedPromiseResolver> scoped_resolver) {
@@ -319,6 +323,7 @@ void OnPreventSilentAccessComplete(
   resolver->Resolve();
 }
 
+#if defined(MUON_CHROMIUM_BUILD)
 void OnGetComplete(std::unique_ptr<ScopedPromiseResolver> scoped_resolver,
                    RequiredOriginType required_origin_type,
                    CredentialManagerError error,
@@ -336,6 +341,7 @@ void OnGetComplete(std::unique_ptr<ScopedPromiseResolver> scoped_resolver,
     resolver->Reject(CredentialManagerErrorToDOMException(error));
   }
 }
+#endif
 
 DOMArrayBuffer* VectorToDOMArrayBuffer(const Vector<uint8_t> buffer) {
   return DOMArrayBuffer::Create(static_cast<const void*>(buffer.data()),
@@ -375,6 +381,7 @@ void OnMakePublicKeyCredentialComplete(
   }
 }
 
+#if defined(MUON_CHROMIUM_BUILD)
 void OnGetAssertionComplete(
     std::unique_ptr<ScopedPromiseResolver> scoped_resolver,
     AuthenticatorStatus status,
@@ -415,6 +422,7 @@ void OnGetAssertionComplete(
         mojo::ConvertTo<CredentialManagerError>(status)));
   }
 }
+#endif
 
 }  // namespace
 
@@ -424,6 +432,7 @@ CredentialsContainer* CredentialsContainer::Create() {
 
 CredentialsContainer::CredentialsContainer() = default;
 
+#if defined(MUON_CHROMIUM_BUILD)
 ScriptPromise CredentialsContainer::get(
     ScriptState* script_state,
     const CredentialRequestOptions& options) {
@@ -549,6 +558,7 @@ ScriptPromise CredentialsContainer::store(ScriptState* script_state,
 
   return promise;
 }
+#endif
 
 ScriptPromise CredentialsContainer::create(
     ScriptState* script_state,
